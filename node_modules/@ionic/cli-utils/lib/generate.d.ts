import { CommandLineInputs, CommandLineOptions, CommandMetadata, GenerateOptions, IonicEnvironment, ProjectType } from '../definitions';
import { Runner } from './runner';
import * as angularGenerateLibType from './project/angular/generate';
import * as ionicAngularGenerateLibType from './project/ionic-angular/generate';
export declare abstract class GenerateRunner<T extends GenerateOptions> extends Runner<T, void> {
    protected env: IonicEnvironment;
    constructor(env: IonicEnvironment);
    static createFromProjectType(env: IonicEnvironment, type: 'angular'): Promise<angularGenerateLibType.GenerateRunner>;
    static createFromProjectType(env: IonicEnvironment, type: 'ionic-angular'): Promise<ionicAngularGenerateLibType.GenerateRunner>;
    static createFromProjectType(env: IonicEnvironment, type?: ProjectType): Promise<GenerateRunner<any>>;
    createOptionsFromCommandLine(inputs: CommandLineInputs, options: CommandLineOptions): GenerateOptions;
    ensureCommandLine(inputs: CommandLineInputs, options: CommandLineOptions): Promise<void>;
    abstract specializeCommandMetadata(metadata: CommandMetadata): Promise<CommandMetadata>;
}
export declare function generate(env: IonicEnvironment, inputs: CommandLineInputs, options: CommandLineOptions): Promise<void>;
