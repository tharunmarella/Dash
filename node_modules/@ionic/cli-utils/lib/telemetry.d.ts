import { CLIMeta, IClient, IConfig, IProject, ISession, ITelemetry, InfoItem, LoadedPlugin } from '../definitions';
export interface TelemetryDeps {
    cli: LoadedPlugin;
    client: IClient;
    config: IConfig;
    getInfo: () => Promise<InfoItem[]>;
    meta: CLIMeta;
    project: IProject;
    session: ISession;
}
export declare class Telemetry implements ITelemetry {
    protected readonly cli: LoadedPlugin;
    protected readonly client: IClient;
    protected readonly config: IConfig;
    protected readonly getInfo: () => Promise<InfoItem[]>;
    protected readonly meta: CLIMeta;
    protected readonly project: IProject;
    protected readonly session: ISession;
    constructor({cli, config, client, getInfo, meta, project, session}: TelemetryDeps);
    resetToken(): Promise<void>;
    sendCommand(command: string, args: string[]): Promise<void>;
}
export declare function sendCommand({cli, config, client, getInfo, session, project}: TelemetryDeps, command: string, args: string[]): Promise<void>;
