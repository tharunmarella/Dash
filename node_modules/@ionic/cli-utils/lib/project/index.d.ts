import { IAilmentRegistry, IConfig, IIntegration, ILogger, IProject, IShell, ITaskChain, InfoItem, PackageJson, ProjectFile, ProjectPersonalizationDetails, ProjectType } from '../../definitions';
import { BaseConfig } from '../config';
import * as doctorLibType from '../doctor';
import * as angularProjectLibType from './angular';
import * as ionicAngularProjectLibType from './ionic-angular';
import * as ionic1ProjectLibType from './ionic1';
import * as customProjectLibType from './custom';
export declare const PROJECT_FILE = "ionic.config.json";
export declare const PROJECT_FILE_LEGACY = "ionic.project";
export declare const PROJECT_TYPES: ProjectType[];
export interface ProjectDeps {
    config: IConfig;
    log: ILogger;
    shell: IShell;
    tasks: ITaskChain;
}
export declare abstract class BaseProject extends BaseConfig<ProjectFile> implements IProject {
    type?: ProjectType;
    directory: string;
    protected readonly config: IConfig;
    protected readonly log: ILogger;
    protected readonly shell: IShell;
    protected readonly tasks: ITaskChain;
    protected integrations: IIntegration[];
    protected packageJsonFile?: PackageJson;
    constructor(dir: string, file: string, {config, log, shell, tasks}: ProjectDeps);
    static determineType(projectDir: string, deps: ProjectDeps): Promise<ProjectType | undefined>;
    static createFromProjectType(dir: string, file: string, deps: ProjectDeps, type: 'angular'): Promise<angularProjectLibType.Project>;
    static createFromProjectType(dir: string, file: string, deps: ProjectDeps, type: 'ionic-angular'): Promise<ionicAngularProjectLibType.Project>;
    static createFromProjectType(dir: string, file: string, deps: ProjectDeps, type: 'ionic1'): Promise<ionic1ProjectLibType.Project>;
    static createFromProjectType(dir: string, file: string, deps: ProjectDeps, type: 'custom'): Promise<customProjectLibType.Project>;
    static createFromProjectType(dir: string, file: string, deps: ProjectDeps, type: ProjectType): Promise<IProject>;
    refreshIntegrations(): Promise<void>;
    abstract detected(): Promise<boolean>;
    loadAppId(): Promise<string>;
    readonly packageJsonPath: string;
    loadPackageJson(): Promise<PackageJson>;
    provideDefaults(o: any): Promise<any>;
    is(j: any): j is ProjectFile;
    getInfo(): Promise<InfoItem[]>;
    getSourceDir(): Promise<string>;
    personalize(details: ProjectPersonalizationDetails): Promise<void>;
    getAilmentRegistry(deps: doctorLibType.AutomaticallyTreatableAilmentDeps): Promise<IAilmentRegistry>;
}
/**
 * This is a gross hack.
 *
 * TODO: minimize IonicEnvironment & `env.project.directory` usage, make
 * `env.project` undefined when outside a project.
 */
export declare class OutsideProject extends BaseConfig<never> implements IProject {
    type: undefined;
    integrations: never[];
    is(j: any): j is never;
    private _createError();
    detected(): Promise<boolean>;
    getInfo(): Promise<InfoItem[]>;
    getSourceDir(): Promise<never>;
    loadAppId(): Promise<never>;
    loadPackageJson(): Promise<never>;
    provideDefaults(): Promise<never>;
    personalize(): Promise<never>;
    refreshIntegrations(): Promise<never>;
    getAilmentRegistry(): Promise<never>;
}
export declare function prettyProjectName(type?: string): string;
