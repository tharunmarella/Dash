"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const path = require("path");
const chalk_1 = require("chalk");
const Debug = require("debug");
const lodash = require("lodash");
const format_1 = require("@ionic/cli-framework/utils/format");
const fs_1 = require("@ionic/cli-framework/utils/fs");
const npm_1 = require("@ionic/cli-framework/utils/npm");
const errors_1 = require("../../errors");
const _1 = require("../");
const debug = Debug('ionic:cli-utils:lib:project:angular');
class Project extends _1.BaseProject {
    constructor() {
        super(...arguments);
        this.type = 'ionic1';
    }
    getInfo() {
        const _super = name => super[name];
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const [ionic1Version, v1UtilVersion] = yield Promise.all([this.getFrameworkVersion(), this.getV1UtilVersion()]);
            return [
                ...(yield _super("getInfo").call(this)),
                { type: 'local-packages', key: 'Ionic Framework', value: ionic1Version ? `ionic1 ${ionic1Version}` : 'unknown' },
                { type: 'local-packages', key: '@ionic/v1-util', value: v1UtilVersion ? v1UtilVersion : 'not installed' },
            ];
        });
    }
    detected() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                const bwr = yield npm_1.readBowerJsonFile(path.resolve(this.directory, 'bower.json'));
                const deps = lodash.assign({}, bwr.dependencies, bwr.devDependencies);
                if (typeof deps['ionic'] === 'string') {
                    debug(`${chalk_1.default.bold('ionic')} detected in ${chalk_1.default.bold('bower.json')}`);
                    return true;
                }
            }
            catch (e) {
                // ignore
            }
            return false;
        });
    }
    getSourceDir() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const project = yield this.load();
            if (project.documentRoot) {
                return path.resolve(this.directory, project.documentRoot);
            }
            return path.resolve(this.directory, 'www');
        });
    }
    getFrameworkVersion() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const ionicVersionFilePath = path.resolve(this.directory, 'www', 'lib', 'ionic', 'version.json'); // TODO
            const bowerJsonPath = path.resolve(this.directory, 'bower.json');
            try {
                try {
                    const ionicVersionJson = yield fs_1.fsReadJsonFile(ionicVersionFilePath);
                    return ionicVersionJson['version'];
                }
                catch (e) {
                    this.log.warn(`Error with ${chalk_1.default.bold(format_1.prettyPath(ionicVersionFilePath))} file: ${e}, trying ${chalk_1.default.bold(format_1.prettyPath(bowerJsonPath))}.`);
                    const bwr = yield this.loadBowerJson();
                    const deps = lodash.assign({}, bwr.dependencies, bwr.devDependencies);
                    const ionicEntry = deps['ionic'];
                    if (!ionicEntry) {
                        return;
                    }
                    const m = ionicEntry.match(/.+#(.+)/);
                    if (m && m[1]) {
                        return m[1];
                    }
                }
            }
            catch (e) {
                this.log.error(`Error with ${chalk_1.default.bold(format_1.prettyPath(bowerJsonPath))} file: ${e}`);
            }
        });
    }
    getV1UtilVersion() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const pkgPath = path.resolve(this.directory, 'node_modules', '@ionic', 'v1-util', 'package.json');
            try {
                const pkg = yield npm_1.readPackageJsonFile(pkgPath);
                return pkg.version;
            }
            catch (e) {
                this.log.error(`Error with ${chalk_1.default.bold(format_1.prettyPath(pkgPath))} file: ${e}`);
            }
        });
    }
    loadBowerJson() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (!this.bowerJsonFile) {
                const bowerJsonPath = path.resolve(this.directory, 'bower.json');
                try {
                    this.bowerJsonFile = yield npm_1.readBowerJsonFile(bowerJsonPath);
                }
                catch (e) {
                    if (e === fs_1.ERROR_FILE_INVALID_JSON) {
                        throw new errors_1.FatalException(`Could not parse ${chalk_1.default.bold('bower.json')}. Is it a valid JSON file?`);
                    }
                    else if (e === npm_1.ERROR_INVALID_BOWER_JSON) {
                        throw new errors_1.FatalException(`The ${chalk_1.default.bold('bower.json')} file seems malformed.`);
                    }
                    throw e; // Probably file not found
                }
            }
            return this.bowerJsonFile;
        });
    }
}
exports.Project = Project;
