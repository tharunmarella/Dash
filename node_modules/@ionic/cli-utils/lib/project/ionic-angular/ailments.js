"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const chalk_1 = require("chalk");
const semver = require("semver");
const ailments_1 = require("../../doctor/ailments");
const npm_1 = require("../../utils/npm");
const build_1 = require("../../build");
const serve_1 = require("../../serve");
const build_2 = require("./build");
const serve_2 = require("./serve");
function registerAilments(registry, deps) {
    registry.register(new IonicAngularUpdateAvailable(deps));
    registry.register(new IonicAngularMajorUpdateAvailable(deps));
    registry.register(new AppScriptsUpdateAvailable(deps));
    registry.register(new AppScriptsMajorUpdateAvailable(deps));
    registry.register(new IonicAngularPackageJsonHasDefaultIonicBuildCommand(deps));
    registry.register(new IonicAngularPackageJsonHasDefaultIonicServeCommand(deps));
}
exports.registerAilments = registerAilments;
class IonicAngularAilment extends ailments_1.Ailment {
    constructor(deps) {
        super(deps);
    }
}
class AutomaticallyTreatableIonicAngularAilment extends ailments_1.AutomaticallyTreatableAilment {
    constructor(deps) {
        super(deps);
    }
}
class IonicAngularUpdateAvailable extends IonicAngularAilment {
    constructor() {
        super(...arguments);
        this.id = 'ionic-angular-update-available';
    }
    getVersionPair() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (!this.currentVersion || !this.latestVersion) {
                this.currentVersion = yield this.project.getFrameworkVersion();
                this.latestVersion = yield npm_1.pkgLatestVersion('ionic-angular');
            }
            if (!this.currentVersion || !this.latestVersion) {
                return ['0.0.0', '0.0.0'];
            }
            return [this.currentVersion, this.latestVersion];
        });
    }
    getMessage() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const [currentVersion, latestVersion] = yield this.getVersionPair();
            return (`Update available for Ionic Framework.\n` +
                `An update is available for ${chalk_1.default.bold('ionic-angular')} (${chalk_1.default.cyan(currentVersion)} => ${chalk_1.default.cyan(latestVersion)}).\n`).trim();
        });
    }
    detected() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const [currentVersion, latestVersion] = yield this.getVersionPair();
            const diff = semver.diff(currentVersion, latestVersion);
            return diff === 'minor' || diff === 'patch';
        });
    }
    getTreatmentSteps() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = yield this.config.load();
            const { npmClient } = config;
            const [, latestVersion] = yield this.getVersionPair();
            const args = yield npm_1.pkgManagerArgs({ npmClient, shell: this.shell }, { command: 'install', pkg: `ionic-angular@${latestVersion ? latestVersion : 'latest'}` });
            return [
                { name: `Visit ${chalk_1.default.bold('https://github.com/ionic-team/ionic/releases')} for each upgrade's instructions` },
                { name: `If no instructions, run: ${chalk_1.default.green(args.join(' '))}` },
                { name: `Watch for npm warnings about peer dependencies--they may need manual updating` },
            ];
        });
    }
}
class IonicAngularMajorUpdateAvailable extends IonicAngularAilment {
    constructor() {
        super(...arguments);
        this.id = 'ionic-angular-major-update-available';
    }
    getVersionPair() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (!this.currentVersion || !this.latestVersion) {
                this.currentVersion = yield this.project.getFrameworkVersion();
                this.latestVersion = yield npm_1.pkgLatestVersion('ionic-angular');
            }
            if (!this.currentVersion || !this.latestVersion) {
                return ['0.0.0', '0.0.0'];
            }
            return [this.currentVersion, this.latestVersion];
        });
    }
    getMessage() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const [currentVersion, latestVersion] = yield this.getVersionPair();
            return (`Major update available for Ionic Framework.\n` +
                `A major update is available for ${chalk_1.default.bold('ionic-angular')} (${chalk_1.default.cyan(currentVersion)} => ${chalk_1.default.cyan(latestVersion)}).\n`).trim();
        });
    }
    detected() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const [currentVersion, latestVersion] = yield this.getVersionPair();
            const diff = semver.diff(currentVersion, latestVersion);
            return diff === 'major';
        });
    }
    getTreatmentSteps() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return [
                { name: `Visit ${chalk_1.default.bold('https://blog.ionicframework.com')} and ${chalk_1.default.bold('https://github.com/ionic-team/ionic/releases')} for upgrade instructions` },
            ];
        });
    }
}
class AppScriptsUpdateAvailable extends AutomaticallyTreatableIonicAngularAilment {
    constructor() {
        super(...arguments);
        this.id = 'app-scripts-update-available';
    }
    getVersionPair() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (!this.currentVersion || !this.latestVersion) {
                this.currentVersion = yield this.project.getAppScriptsVersion();
                this.latestVersion = yield npm_1.pkgLatestVersion('@ionic/app-scripts');
            }
            if (!this.currentVersion || !this.latestVersion) {
                return ['0.0.0', '0.0.0'];
            }
            return [this.currentVersion, this.latestVersion];
        });
    }
    getMessage() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const [currentVersion, latestVersion] = yield this.getVersionPair();
            return (`Update available for ${chalk_1.default.bold('@ionic/app-scripts')}.\n` +
                `An update is available for ${chalk_1.default.bold('@ionic/app-scripts')} (${chalk_1.default.cyan(currentVersion)} => ${chalk_1.default.cyan(latestVersion)}).\n`).trim();
        });
    }
    detected() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const [currentVersion, latestVersion] = yield this.getVersionPair();
            const diff = semver.diff(currentVersion, latestVersion);
            return diff === 'minor' || diff === 'patch';
        });
    }
    getTreatmentSteps() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = yield this.config.load();
            const { npmClient } = config;
            const [, latestVersion] = yield this.getVersionPair();
            const [manager, ...managerArgs] = yield npm_1.pkgManagerArgs({ npmClient, shell: this.shell }, { command: 'install', pkg: `@ionic/app-scripts@${latestVersion ? latestVersion : 'latest'}`, saveDev: true });
            return [
                {
                    name: `Run: ${chalk_1.default.green(manager + ' ' + managerArgs.join(' '))}`,
                    treat: () => tslib_1.__awaiter(this, void 0, void 0, function* () {
                        yield this.shell.run(manager, managerArgs, {});
                    }),
                },
            ];
        });
    }
}
class AppScriptsMajorUpdateAvailable extends IonicAngularAilment {
    constructor() {
        super(...arguments);
        this.id = 'app-scripts-major-update-available';
    }
    getVersionPair() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (!this.currentVersion || !this.latestVersion) {
                this.currentVersion = yield this.project.getAppScriptsVersion();
                this.latestVersion = yield npm_1.pkgLatestVersion('@ionic/app-scripts');
            }
            if (!this.currentVersion || !this.latestVersion) {
                return ['0.0.0', '0.0.0'];
            }
            return [this.currentVersion, this.latestVersion];
        });
    }
    getMessage() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const [currentVersion, latestVersion] = yield this.getVersionPair();
            return (`Major update available for ${chalk_1.default.bold('@ionic/app-scripts')}.\n` +
                `A major update is available for ${chalk_1.default.bold('@ionic/app-scripts')} (${chalk_1.default.cyan(currentVersion)} => ${chalk_1.default.cyan(latestVersion)}).\n`).trim();
        });
    }
    detected() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const [currentVersion, latestVersion] = yield this.getVersionPair();
            const diff = semver.diff(currentVersion, latestVersion);
            return diff === 'major';
        });
    }
    getTreatmentSteps() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return [
                { name: `Visit ${chalk_1.default.bold('https://github.com/ionic-team/ionic-app-scripts/releases')} for upgrade instructions` },
            ];
        });
    }
}
class IonicAngularPackageJsonHasDefaultIonicBuildCommand extends IonicAngularAilment {
    constructor() {
        super(...arguments);
        this.id = 'ionic-angular-package-json-has-default-ionic-build-command';
    }
    getMessage() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return (`The ${chalk_1.default.bold(build_1.BUILD_SCRIPT)} npm script is unchanged.\n` +
                `The Ionic CLI as of version 4.0 looks for the ${chalk_1.default.bold(build_1.BUILD_SCRIPT)} npm script in ${chalk_1.default.bold('package.json')} for a custom build script to run instead of the default (${chalk_1.default.green(build_2.DEFAULT_BUILD_SCRIPT_VALUE)}). If you don't use it, it's considered quicker and cleaner to just remove it.`).trim();
        });
    }
    detected() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const pkg = yield this.project.loadPackageJson();
            if (pkg.scripts && pkg.scripts[build_1.BUILD_SCRIPT] === build_2.DEFAULT_BUILD_SCRIPT_VALUE) {
                return true;
            }
            return false;
        });
    }
    getTreatmentSteps() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return [
                { name: `Remove the ${chalk_1.default.bold(build_1.BUILD_SCRIPT)} npm script from ${chalk_1.default.bold('package.json')}` },
                { name: `Continue using ${chalk_1.default.green('ionic build')} normally` },
            ];
        });
    }
}
class IonicAngularPackageJsonHasDefaultIonicServeCommand extends IonicAngularAilment {
    constructor() {
        super(...arguments);
        this.id = 'ionic-angular-package-json-has-default-ionic-serve-command';
    }
    getMessage() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return (`The ${chalk_1.default.bold(serve_1.SERVE_SCRIPT)} npm script is unchanged.\n` +
                `The Ionic CLI as of version 4.0 looks for the ${chalk_1.default.bold(serve_1.SERVE_SCRIPT)} npm script in ${chalk_1.default.bold('package.json')} for a custom serve script to run instead of the default (${chalk_1.default.green(serve_2.DEFAULT_SERVE_SCRIPT_VALUE)}). If you don't use it, it's considered quicker and cleaner to just remove it.`).trim();
        });
    }
    detected() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const pkg = yield this.project.loadPackageJson();
            if (pkg.scripts && pkg.scripts[serve_1.SERVE_SCRIPT] === serve_2.DEFAULT_SERVE_SCRIPT_VALUE) {
                return true;
            }
            return false;
        });
    }
    getTreatmentSteps() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return [
                { name: `Remove the ${chalk_1.default.bold(serve_1.SERVE_SCRIPT)} npm script from ${chalk_1.default.bold('package.json')}` },
                { name: `Continue using ${chalk_1.default.green('ionic serve')} normally` },
            ];
        });
    }
}
