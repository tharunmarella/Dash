"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const chalk_1 = require("chalk");
const Debug = require("debug");
const cli_framework_1 = require("@ionic/cli-framework");
const build_1 = require("../../build");
const app_scripts_1 = require("./app-scripts");
const debug = Debug('ionic:cli-utils:lib:project:ionic-angular:build');
exports.DEFAULT_PROGRAM = 'ionic-app-scripts';
exports.DEFAULT_BUILD_SCRIPT_VALUE = `${exports.DEFAULT_PROGRAM} build`;
class BuildRunner extends build_1.BuildRunner {
    getCommandMetadata() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return {
                exampleCommands: ['--prod', '-- --generateSourceMap false'],
                longDescription: `${chalk_1.default.green('ionic build')} uses ${chalk_1.default.bold('@ionic/app-scripts')}. See the project's ${chalk_1.default.bold('README.md')}${chalk_1.default.cyan('[1]')} for documentation. Options not listed below are considered advanced and can be passed to the ${chalk_1.default.green('ionic-app-scripts')} CLI using the ${chalk_1.default.green('--')} separator after the Ionic CLI arguments. See the examples.

${chalk_1.default.cyan('[1]')}: ${chalk_1.default.bold('https://github.com/ionic-team/ionic-app-scripts/blob/master/README.md')}`,
                options: app_scripts_1.APP_SCRIPTS_OPTIONS,
            };
        });
    }
    createOptionsFromCommandLine(inputs, options) {
        const baseOptions = super.createBaseOptionsFromCommandLine(inputs, options);
        return Object.assign({}, baseOptions, { type: 'ionic-angular', prod: options['prod'] ? true : false, aot: options['aot'] ? true : false, minifyjs: options['minifyjs'] ? true : false, minifycss: options['minifycss'] ? true : false, optimizejs: options['optimizejs'] ? true : false, env: options['env'] ? String(options['env']) : undefined });
    }
    buildProject(options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { pkgManagerArgs } = yield Promise.resolve().then(() => require('../../utils/npm'));
            const config = yield this.env.config.load();
            const { npmClient } = config;
            const pkg = yield this.env.project.loadPackageJson();
            let program = exports.DEFAULT_PROGRAM;
            let args = this.generateAppScriptsArgs(options);
            const shellOptions = { cwd: this.env.project.directory, env: Object.assign({ FORCE_COLOR: chalk_1.default.enabled ? '1' : '0' }, process.env) };
            debug(`Looking for ${chalk_1.default.cyan(build_1.BUILD_SCRIPT)} npm script.`);
            if (pkg.scripts && pkg.scripts[build_1.BUILD_SCRIPT]) {
                if (pkg.scripts[build_1.BUILD_SCRIPT] === exports.DEFAULT_BUILD_SCRIPT_VALUE) {
                    debug(`Found ${chalk_1.default.cyan(build_1.BUILD_SCRIPT)}, but it is the default. Not running.`);
                    args = ['build', ...args];
                }
                else {
                    debug(`Invoking ${chalk_1.default.cyan(build_1.BUILD_SCRIPT)} npm script.`);
                    const [pkgManager, ...pkgArgs] = yield pkgManagerArgs({ npmClient, shell: this.env.shell }, { command: 'run', script: build_1.BUILD_SCRIPT, scriptArgs: args });
                    program = pkgManager;
                    args = pkgArgs;
                }
            }
            else {
                args = ['build', ...args];
            }
            yield this.env.shell.run(program, args, shellOptions);
        });
    }
    generateAppScriptsArgs(options) {
        const minimistArgs = {
            _: [],
            prod: options.prod ? true : false,
            aot: options.aot ? true : false,
            minifyjs: options.minifyjs ? true : false,
            minifycss: options.minifycss ? true : false,
            optimizejs: options.optimizejs ? true : false,
            target: options.target,
            platform: options.platform,
            env: options.env,
        };
        return [...cli_framework_1.unparseArgs(minimistArgs, { useEquals: false }), ...options['--']];
    }
}
exports.BuildRunner = BuildRunner;
