"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const path = require("path");
const chalk_1 = require("chalk");
const Debug = require("debug");
const lodash = require("lodash");
const format_1 = require("@ionic/cli-framework/utils/format");
const npm_1 = require("@ionic/cli-framework/utils/npm");
const _1 = require("../");
const debug = Debug('ionic:cli-utils:lib:project:ionic-angular');
class Project extends _1.BaseProject {
    constructor() {
        super(...arguments);
        this.type = 'ionic-angular';
    }
    getInfo() {
        const _super = name => super[name];
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const [ionicAngularVersion, appScriptsVersion] = yield Promise.all([this.getFrameworkVersion(), this.getAppScriptsVersion()]);
            return [
                ...(yield _super("getInfo").call(this)),
                { type: 'local-packages', key: 'Ionic Framework', value: ionicAngularVersion ? `ionic-angular ${ionicAngularVersion}` : 'not installed' },
                { type: 'local-packages', key: '@ionic/app-scripts', value: appScriptsVersion ? appScriptsVersion : 'not installed' },
            ];
        });
    }
    getAilmentRegistry(deps) {
        const _super = name => super[name];
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { registerAilments } = yield Promise.resolve().then(() => require('./ailments'));
            const registry = yield _super("getAilmentRegistry").call(this, deps);
            registerAilments(registry, Object.assign({}, deps, { project: this }));
            return registry;
        });
    }
    detected() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                const pkg = yield npm_1.readPackageJsonFile(path.resolve(this.directory, 'package.json'));
                const deps = lodash.assign({}, pkg.dependencies, pkg.devDependencies);
                if (typeof deps['ionic-angular'] === 'string') {
                    debug(`${chalk_1.default.bold('ionic-angular')} detected in ${chalk_1.default.bold('package.json')}`);
                    return true;
                }
            }
            catch (e) {
                // ignore
            }
            return false;
        });
    }
    getFrameworkVersion() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const pkgPath = path.resolve(this.directory, 'node_modules', 'ionic-angular', 'package.json');
            try {
                const pkg = yield npm_1.readPackageJsonFile(pkgPath);
                return pkg.version;
            }
            catch (e) {
                this.log.error(`Error with ${chalk_1.default.bold(format_1.prettyPath(pkgPath))} file: ${e}`);
            }
        });
    }
    getAppScriptsVersion() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const pkgPath = path.resolve(this.directory, 'node_modules', '@ionic', 'app-scripts', 'package.json');
            try {
                const pkg = yield npm_1.readPackageJsonFile(pkgPath);
                return pkg.version;
            }
            catch (e) {
                this.log.error(`Error with ${chalk_1.default.bold(format_1.prettyPath(pkgPath))} file: ${e}`);
            }
        });
    }
}
exports.Project = Project;
