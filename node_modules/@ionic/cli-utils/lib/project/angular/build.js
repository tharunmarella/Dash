"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const chalk_1 = require("chalk");
const Debug = require("debug");
const cli_framework_1 = require("@ionic/cli-framework");
const constants_1 = require("../../../constants");
const build_1 = require("../../build");
const debug = Debug('ionic:cli-utils:lib:project:angular:build');
class BuildRunner extends build_1.BuildRunner {
    getCommandMetadata() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return {
                exampleCommands: ['--prod', '-- --extract-css=true'],
                longDescription: `
${chalk_1.default.green('ionic build')} uses the Angular CLI. Use ${chalk_1.default.green('ng build --help')} to list all Angular CLI options for building your app. See the ${chalk_1.default.green('ng build')} docs${chalk_1.default.cyan('[1]')} for explanations. Options not listed below are considered advanced and can be passed to the ${chalk_1.default.green('ng')} CLI using the ${chalk_1.default.green('--')} separator after the Ionic CLI arguments. See the examples.

${chalk_1.default.cyan('[1]')}: ${chalk_1.default.bold('https://github.com/angular/angular-cli/wiki/build#ng-build')}`,
                options: [
                    {
                        name: 'dev',
                        description: `Sets the build target to ${chalk_1.default.green('development')}`,
                        type: Boolean,
                        hint: 'ng',
                    },
                    {
                        name: 'prod',
                        description: `Sets the build target to ${chalk_1.default.green('production')}`,
                        type: Boolean,
                        hint: 'ng',
                    },
                    {
                        name: 'target',
                        description: 'Set the build target to a custom value',
                        aliases: ['t'],
                        groups: [constants_1.OptionGroup.Advanced],
                        hint: 'ng',
                    },
                    {
                        name: 'environment',
                        description: 'Set the build environment to a custom value',
                        aliases: ['e'],
                        groups: [constants_1.OptionGroup.Advanced],
                        hint: 'ng',
                    },
                ],
            };
        });
    }
    createOptionsFromCommandLine(inputs, options) {
        const baseOptions = super.createBaseOptionsFromCommandLine(inputs, options);
        let target = options['target'] ? String(options['target']) : undefined;
        const environment = options['environment'] ? String(options['environment']) : undefined;
        if (!target) {
            if (options['dev']) {
                target = 'development';
            }
            else if (options['prod']) {
                target = 'production';
            }
        }
        return Object.assign({}, baseOptions, { type: 'angular', target,
            environment });
    }
    buildOptionsToNgArgs(options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const args = {
                _: [],
                environment: options.environment,
            };
            if (options.target === 'development') {
                args['dev'] = true;
            }
            else if (options.target === 'production') {
                args['prod'] = true;
            }
            else {
                args['target'] = options.target;
            }
            return [...cli_framework_1.unparseArgs(args, {}), ...options['--']];
        });
    }
    buildProject(options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { pkgManagerArgs } = yield Promise.resolve().then(() => require('../../utils/npm'));
            const config = yield this.env.config.load();
            const { npmClient } = config;
            const pkg = yield this.env.project.loadPackageJson();
            const args = yield this.buildOptionsToNgArgs(options);
            const shellOptions = { cwd: this.env.project.directory, env: Object.assign({ FORCE_COLOR: chalk_1.default.enabled ? '1' : '0' }, process.env) };
            debug(`Looking for ${chalk_1.default.cyan(build_1.BUILD_SCRIPT)} npm script.`);
            if (pkg.scripts && pkg.scripts[build_1.BUILD_SCRIPT]) {
                debug(`Invoking ${chalk_1.default.cyan(build_1.BUILD_SCRIPT)} npm script.`);
                const [pkgManager, ...pkgArgs] = yield pkgManagerArgs({ npmClient, shell: this.env.shell }, { command: 'run', script: build_1.BUILD_SCRIPT });
                yield this.env.shell.run(pkgManager, pkgArgs, shellOptions);
            }
            else {
                yield this.env.shell.run('ng', ['build', ...args], shellOptions);
            }
        });
    }
}
exports.BuildRunner = BuildRunner;
