"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const fs = require("fs");
const path = require("path");
const chalk_1 = require("chalk");
const Debug = require("debug");
const through2 = require("through2");
const split2 = require("split2");
const cli_framework_1 = require("@ionic/cli-framework");
const fs_1 = require("@ionic/cli-framework/utils/fs");
const constants_1 = require("../../../constants");
const errors_1 = require("../../errors");
const serve_1 = require("../../serve");
const DEFAULT_PROGRAM = 'ng';
const NG_SERVE_CONNECTIVITY_TIMEOUT = 20000; // ms
const NG_AUTODETECTED_PROXY_FILES = ['proxy.conf.json', 'proxy.conf.js', 'proxy.config.json', 'proxy.config.js'];
const debug = Debug('ionic:cli-utils:lib:project:angular:serve');
class ServeRunner extends serve_1.ServeRunner {
    getCommandMetadata() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return {
                exampleCommands: ['-- --extract-css=true'],
                longDescription: `
${chalk_1.default.green('ionic serve')} uses the Angular CLI. Common Angular CLI options such as ${chalk_1.default.green('--target')} and ${chalk_1.default.green('--environment')} are mixed in with Ionic CLI options. Use ${chalk_1.default.green('ng serve --help')} to list all options. See the ${chalk_1.default.green('ng build')} docs${chalk_1.default.cyan('[1]')} for explanations. Options not listed below are considered advanced and can be passed to the Angular CLI using the ${chalk_1.default.green('--')} separator after the Ionic CLI arguments. See the examples.

If a ${chalk_1.default.bold('proxy.config.json')} or ${chalk_1.default.bold('proxy.config.js')} file is detected in your project, the Angular CLI's ${chalk_1.default.green('--proxy-config')} option is automatically specified. You can use ${chalk_1.default.green('--no-proxy')} to disable this behavior. See the Angular CLI proxy documentation${chalk_1.default.cyan('[2]')} for more information.

${chalk_1.default.cyan('[1]')}: ${chalk_1.default.bold('https://github.com/angular/angular-cli/wiki/build#ng-build')}
${chalk_1.default.cyan('[2]')}: ${chalk_1.default.bold('https://github.com/angular/angular-cli/wiki/stories-proxy#proxy-to-backend')}`,
                options: [
                    {
                        name: 'dev',
                        description: `Sets the build target to ${chalk_1.default.green('development')}`,
                        type: Boolean,
                        hint: 'ng',
                    },
                    {
                        name: 'prod',
                        description: `Sets the build target to ${chalk_1.default.green('production')}`,
                        type: Boolean,
                        hint: 'ng',
                    },
                    {
                        name: 'target',
                        description: 'Set the build target to a custom value',
                        aliases: ['t'],
                        groups: [constants_1.OptionGroup.Advanced],
                        hint: 'ng',
                    },
                    {
                        name: 'environment',
                        description: 'Set the build environment to a custom value',
                        aliases: ['e'],
                        groups: [constants_1.OptionGroup.Advanced],
                        hint: 'ng',
                    },
                ],
            };
        });
    }
    createOptionsFromCommandLine(inputs, options) {
        const baseOptions = super.createOptionsFromCommandLine(inputs, options);
        let target = options['target'] ? String(options['target']) : undefined;
        const environment = options['environment'] ? String(options['environment']) : undefined;
        if (!target) {
            if (options['dev']) {
                target = 'development';
            }
            else if (options['prod']) {
                target = 'production';
            }
        }
        return Object.assign({}, baseOptions, { target,
            environment });
    }
    serveProject(options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { findClosestOpenPort, isHostConnectable } = yield Promise.resolve().then(() => require('../../utils/network'));
            const [externalIP, availableInterfaces] = yield this.selectExternalIP(options);
            debug('finding closest port to %d', options.port);
            const ngPort = yield findClosestOpenPort(options.port, '0.0.0.0');
            options.port = ngPort;
            const { program } = yield this.serveCommandWrapper(options);
            debug('waiting for connectivity with ng serve (%dms timeout)', NG_SERVE_CONNECTIVITY_TIMEOUT);
            yield isHostConnectable('localhost', ngPort, NG_SERVE_CONNECTIVITY_TIMEOUT);
            return {
                custom: program !== DEFAULT_PROGRAM,
                protocol: 'http',
                localAddress: 'localhost',
                externalAddress: externalIP,
                externalNetworkInterfaces: availableInterfaces,
                port: ngPort,
                externallyAccessible: ![serve_1.BIND_ALL_ADDRESS, ...serve_1.LOCAL_ADDRESSES].includes(externalIP),
            };
        });
    }
    serveCommandWrapper(options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { promptToInstallPkg } = yield Promise.resolve().then(() => require('../../utils/npm'));
            try {
                return yield this.servecmd(options);
            }
            catch (e) {
                if (!(e instanceof errors_1.ServeCommandNotFoundException)) {
                    throw e;
                }
                const pkg = '@angular/cli';
                this.env.log.nl();
                this.env.log.warn(`Looks like ${chalk_1.default.green(pkg)} isn't installed in this project.\n` +
                    `This package is required for ${chalk_1.default.green('ionic serve')} as of CLI 4.0. For more details, please see the CHANGELOG: ${chalk_1.default.bold('https://github.com/ionic-team/ionic-cli/blob/master/CHANGELOG.md#4.0.0')}`);
                const installed = yield promptToInstallPkg(this.env, { pkg, saveDev: true });
                if (!installed) {
                    throw new errors_1.FatalException(`${chalk_1.default.green(pkg)} is required for ${chalk_1.default.green('ionic serve')} to work properly.`);
                }
                return this.servecmd(options);
            }
        });
    }
    servecmd(options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { pkgManagerArgs } = yield Promise.resolve().then(() => require('../../utils/npm'));
            const { registerShutdownFunction } = yield Promise.resolve().then(() => require('../../process'));
            const config = yield this.env.config.load();
            const pkg = yield this.env.project.loadPackageJson();
            const { npmClient } = config;
            let program = DEFAULT_PROGRAM;
            let args = yield this.serveOptionsToNgArgs(options);
            const shellOptions = { cwd: this.env.project.directory, env: Object.assign({ FORCE_COLOR: chalk_1.default.enabled ? '1' : '0' }, process.env) };
            debug(`Looking for ${chalk_1.default.cyan(serve_1.SERVE_SCRIPT)} npm script.`);
            if (pkg.scripts && pkg.scripts[serve_1.SERVE_SCRIPT]) {
                debug(`Invoking ${chalk_1.default.cyan(serve_1.SERVE_SCRIPT)} npm script.`);
                const [pkgManager, ...pkgArgs] = yield pkgManagerArgs({ npmClient, shell: this.env.shell }, { command: 'run', script: serve_1.SERVE_SCRIPT, scriptArgs: [...args] });
                program = pkgManager;
                args = pkgArgs;
            }
            else {
                args = ['serve', ...args];
            }
            const p = yield this.env.shell.spawn(program, args, shellOptions);
            return new Promise((resolve, reject) => {
                p.on('error', (err) => {
                    if (program === DEFAULT_PROGRAM && err.code === 'ENOENT') {
                        reject(new errors_1.ServeCommandNotFoundException(`${chalk_1.default.bold(DEFAULT_PROGRAM)} command not found.`));
                    }
                    else {
                        reject(err);
                    }
                });
                registerShutdownFunction(() => p.kill());
                const log = this.env.log.clone({ prefix: chalk_1.default.dim(`[${program}]`), wrap: false });
                const ws = log.createWriteStream();
                if (program === DEFAULT_PROGRAM) {
                    const stdoutFilter = through2(function (chunk, enc, callback) {
                        const str = chunk.toString();
                        if (!str.includes('Development Server is listening')) {
                            this.push(chunk);
                        }
                        callback();
                    });
                    p.stdout.pipe(split2()).pipe(stdoutFilter).pipe(ws);
                    p.stderr.pipe(split2()).pipe(ws);
                }
                else {
                    p.stdout.pipe(split2()).pipe(ws);
                    p.stderr.pipe(split2()).pipe(ws);
                }
                resolve({ program });
            });
        });
    }
    serveOptionsToNgArgs(options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const args = {
                _: [],
                host: options.address,
                port: String(options.port),
                progress: 'false',
                target: options.target,
                environment: options.environment,
                deleteOutputPath: options.engine === 'cordova' ? 'false' : undefined,
            };
            if (options.proxy) {
                const proxyConfig = yield this.detectProxyConfig();
                // this is fine as long as cwd of ng serve is the project directory
                if (proxyConfig) {
                    args.proxyConfig = proxyConfig;
                }
            }
            return [...cli_framework_1.unparseArgs(args, {}), ...options['--']];
        });
    }
    detectProxyConfig() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            for (const f of NG_AUTODETECTED_PROXY_FILES) {
                if (yield fs_1.pathAccessible(path.resolve(this.env.project.directory, f), fs.constants.R_OK)) {
                    debug(`Detected ${chalk_1.default.bold(f)} proxy file`);
                    return f;
                }
            }
            debug(`None of the following proxy files found: ${NG_AUTODETECTED_PROXY_FILES.map(f => chalk_1.default.bold(f)).join(', ')}`);
        });
    }
}
exports.ServeRunner = ServeRunner;
