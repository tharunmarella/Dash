/// <reference types="node" />
import * as crossSpawnType from 'cross-spawn';
import { ILogger, IShell, IShellOutputOptions, IShellRunOptions, IShellSpawnOptions, ITaskChain } from '../definitions';
export declare const ERROR_SHELL_COMMAND_NOT_FOUND = "SHELL_COMMAND_NOT_FOUND";
export interface ShellDeps {
    tasks: ITaskChain;
    log: ILogger;
    projectDir?: string;
}
export declare class Shell implements IShell {
    protected tasks: ITaskChain;
    protected log: ILogger;
    protected projectDir?: string;
    constructor({tasks, log, projectDir}: ShellDeps);
    run(command: string, args: string[], {showCommand, showError, fatalOnNotFound, fatalOnError, logOptions, truncateErrorOutput, ...crossSpawnOptions}: IShellRunOptions): Promise<void>;
    output(command: string, args: string[], {fatalOnError, showCommand, ...crossSpawnOptions}: IShellOutputOptions): Promise<string>;
    spawn(command: string, args: string[], {showCommand, ...crossSpawnOptions}: IShellSpawnOptions): Promise<crossSpawnType.ChildProcess>;
    cmdinfo(cmd: string, args?: string[]): Promise<string | undefined>;
    protected prepareSpawnOptions(options: IShellSpawnOptions): void;
    protected supplementPATH(p: string): string;
}
