import { CommandLineInputs, CommandLineOptions, CommandMetadata, CommandMetadataOption, IonicEnvironment, LabServeDetails, NetworkInterface, ProjectType, ServeDetails, ServeOptions } from '../definitions';
import { Runner } from './runner';
import * as ionic1ServeLibType from './project/ionic1/serve';
import * as ionicAngularServeLibType from './project/ionic-angular/serve';
import * as angularServeLibType from './project/angular/serve';
export declare const DEFAULT_DEV_LOGGER_PORT = 53703;
export declare const DEFAULT_LIVERELOAD_PORT = 35729;
export declare const DEFAULT_SERVER_PORT = 8100;
export declare const DEFAULT_LAB_PORT = 8200;
export declare const BIND_ALL_ADDRESS = "0.0.0.0";
export declare const LOCAL_ADDRESSES: string[];
export declare const BROWSERS: string[];
export declare const SERVE_SCRIPT = "ionic:serve";
export declare const COMMON_SERVE_COMMAND_OPTIONS: CommandMetadataOption[];
export interface DevAppDetails {
    channel?: string;
    port?: number;
    interfaces: {
        address: string;
        broadcast: string;
    }[];
}
export declare abstract class ServeRunner<T extends ServeOptions> extends Runner<T, ServeDetails> {
    protected env: IonicEnvironment;
    constructor(env: IonicEnvironment);
    static createFromProjectType(env: IonicEnvironment, type: 'ionic1'): Promise<ionic1ServeLibType.ServeRunner>;
    static createFromProjectType(env: IonicEnvironment, type: 'ionic-angular'): Promise<ionicAngularServeLibType.ServeRunner>;
    static createFromProjectType(env: IonicEnvironment, type: 'angular'): Promise<angularServeLibType.ServeRunner>;
    static createFromProjectType(env: IonicEnvironment, type?: ProjectType): Promise<ServeRunner<any>>;
    abstract getCommandMetadata(): Promise<Partial<CommandMetadata>>;
    abstract serveProject(options: T): Promise<ServeDetails>;
    createOptionsFromCommandLine(inputs: CommandLineInputs, options: CommandLineOptions): ServeOptions;
    checkDevApp(options: T): Promise<void>;
    run(options: T): Promise<ServeDetails>;
    gatherDevAppDetails(options: T): Promise<DevAppDetails | undefined>;
    publishDevApp(options: T, details: DevAppDetails & {
        port: number;
    }): Promise<string | undefined>;
    getSupportedDevAppPlugins(): Promise<Set<string>>;
    runLab(url: string, details: LabServeDetails): Promise<void>;
    selectExternalIP(options: T): Promise<[string, NetworkInterface[]]>;
}
export declare function serve(env: IonicEnvironment, inputs: CommandLineInputs, options: CommandLineOptions): Promise<ServeDetails>;
