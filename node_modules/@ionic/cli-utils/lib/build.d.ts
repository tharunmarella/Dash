import { BaseBuildOptions, BuildOptions, CommandLineInputs, CommandLineOptions, CommandMetadata, IonicEnvironment, ProjectType } from '../definitions';
import { Runner } from './runner';
import * as ionic1BuildLibType from './project/ionic1/build';
import * as ionicAngularBuildLibType from './project/ionic-angular/build';
import * as angularBuildLibType from './project/angular/build';
export declare const BUILD_SCRIPT = "ionic:build";
export declare abstract class BuildRunner<T extends BuildOptions<any>> extends Runner<T, void> {
    protected env: IonicEnvironment;
    constructor(env: IonicEnvironment);
    static createFromProjectType(env: IonicEnvironment, type: 'angular'): Promise<angularBuildLibType.BuildRunner>;
    static createFromProjectType(env: IonicEnvironment, type: 'ionic-angular'): Promise<ionicAngularBuildLibType.BuildRunner>;
    static createFromProjectType(env: IonicEnvironment, type: 'ionic1'): Promise<ionic1BuildLibType.BuildRunner>;
    static createFromProjectType(env: IonicEnvironment, type?: ProjectType): Promise<BuildRunner<BuildOptions<any>>>;
    abstract getCommandMetadata(): Promise<Partial<CommandMetadata>>;
    abstract createOptionsFromCommandLine(inputs: CommandLineInputs, options: CommandLineOptions): T;
    abstract buildProject(options: T): Promise<void>;
    createBaseOptionsFromCommandLine(inputs: CommandLineInputs, options: CommandLineOptions): BaseBuildOptions;
    run(options: T): Promise<void>;
}
export declare function build(env: IonicEnvironment, inputs: CommandLineInputs, options: CommandLineOptions): Promise<void>;
