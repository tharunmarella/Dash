import * as inquirerType from 'inquirer';
import { CLIMeta, IClient, IConfig, ILogger, IProject, IRootNamespace, ISession, IShell, ITaskChain, ITelemetry, InfoItem, IonicEnvironment, IonicEnvironmentFlags, IonicEnvironmentPlugins, PromptModule } from '../definitions';
export declare class Environment implements IonicEnvironment {
    readonly flags: IonicEnvironmentFlags;
    readonly client: IClient;
    readonly config: IConfig;
    getInfo: () => Promise<InfoItem[]>;
    readonly log: ILogger;
    readonly prompt: PromptModule;
    readonly meta: CLIMeta;
    project: IProject;
    readonly plugins: IonicEnvironmentPlugins;
    session: ISession;
    readonly shell: IShell;
    readonly tasks: ITaskChain;
    readonly telemetry: ITelemetry;
    readonly namespace: IRootNamespace;
    keepopen: boolean;
    private bottomBar?;
    private env;
    constructor({bottomBar, client, config, env, flags, getInfo, log, meta, namespace, plugins, project, prompt, session, shell, tasks, telemetry}: {
        bottomBar?: inquirerType.ui.BottomBar;
        client: IClient;
        config: IConfig;
        env: {
            [key: string]: string;
        };
        flags: IonicEnvironmentFlags;
        getInfo: () => Promise<InfoItem[]>;
        log: ILogger;
        meta: CLIMeta;
        namespace: IRootNamespace;
        plugins: IonicEnvironmentPlugins;
        project: IProject;
        prompt: PromptModule;
        session: ISession;
        shell: IShell;
        tasks: ITaskChain;
        telemetry: ITelemetry;
    });
    open(): void;
    close(): void;
    runCommand(pargv: string[], {showExecution}?: {
        showExecution?: boolean;
    }): Promise<void>;
}
