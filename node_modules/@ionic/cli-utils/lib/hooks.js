"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const path = require("path");
const util = require("util");
const chalk_1 = require("chalk");
const Debug = require("debug");
const lodash = require("lodash");
const fn_1 = require("@ionic/cli-framework/utils/fn");
const errors_1 = require("./errors");
const project_1 = require("./project");
const debug = Debug('ionic:cli-utils:lib:hooks');
class Hook {
    get script() {
        return `ionic:${this.name}`;
    }
    constructor({ config, project, shell }) {
        this.config = config;
        this.project = project;
        this.shell = shell;
    }
    run(input) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { pkgManagerArgs } = yield Promise.resolve().then(() => require('./utils/npm'));
            const project = yield this.project.load();
            const pkg = yield this.project.loadPackageJson();
            const config = yield this.config.load();
            const { npmClient } = config;
            debug(`Looking for ${chalk_1.default.cyan(this.script)} npm script.`);
            if (pkg.scripts && pkg.scripts[this.script]) {
                debug(`Invoking ${chalk_1.default.cyan(this.script)} npm script.`);
                const [pkgManager, ...pkgArgs] = yield pkgManagerArgs({ npmClient, shell: this.shell }, { command: 'run', script: this.script });
                yield this.shell.run(pkgManager, pkgArgs, {});
            }
            const hooks = fn_1.conform(project.hooks[this.name]);
            for (const h of hooks) {
                const p = path.resolve(this.project.directory, h);
                try {
                    const hook = yield this.loadHookFn(p);
                    if (!hook) {
                        throw new Error(`Module must have a function for its default export.`);
                    }
                    yield hook(lodash.assign({}, input, {
                        project: {
                            dir: this.project.directory,
                            srcDir: yield this.project.getSourceDir(),
                        },
                        argv: process.argv,
                        env: process.env,
                    }));
                }
                catch (e) {
                    throw new errors_1.HookException(`An error occurred while running an Ionic CLI hook defined in ${chalk_1.default.bold(project_1.PROJECT_FILE)}.\n` +
                        `Hook: ${chalk_1.default.bold(this.name)}\n` +
                        `File: ${chalk_1.default.bold(p)}\n\n` +
                        `${chalk_1.default.red(e.stack ? e.stack : e)}`);
                }
            }
        });
    }
    loadHookFn(p) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const module = require(p);
            if (typeof module === 'function') {
                return module;
            }
            else if (typeof module.default === 'function') {
                return module.default;
            }
            const inspection = util.inspect(module, { colors: chalk_1.default.enabled });
            debug(`Could not load hook function ${chalk_1.default.bold(p)}: ${inspection} not a function`);
        });
    }
}
exports.Hook = Hook;
