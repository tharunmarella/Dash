import { AutomaticTreatmentStep, IAilment, IAilmentRegistry, IAutomaticallyTreatableAilment, IClient, IConfig, ILogger, IProject, ISession, IShell, PromptModule, TreatmentStep } from '../../../definitions';
export declare const ERROR_AILMENT_IGNORED = "AILMENT_IGNORED";
export declare const ERROR_AILMENT_SKIPPED = "AILMENT_SKIPPED";
export interface AilmentDeps {
    client: IClient;
    config: IConfig;
    log: ILogger;
    project: IProject;
    shell: IShell;
    session: ISession;
}
export declare abstract class Ailment implements IAilment {
    protected readonly client: IClient;
    protected readonly config: IConfig;
    protected readonly log: ILogger;
    protected readonly project: IProject;
    protected readonly shell: IShell;
    protected readonly session: ISession;
    constructor({client, config, log, project, shell, session}: AilmentDeps);
    abstract id: string;
    abstract getMessage(): Promise<string>;
    abstract getTreatmentSteps(): Promise<TreatmentStep[]>;
    abstract detected(): Promise<boolean>;
}
export interface AutomaticallyTreatableAilmentDeps extends AilmentDeps {
    prompt: PromptModule;
}
export declare abstract class AutomaticallyTreatableAilment extends Ailment implements IAutomaticallyTreatableAilment {
    protected readonly prompt: PromptModule;
    constructor({prompt, ...deps}: AutomaticallyTreatableAilmentDeps);
    abstract getTreatmentSteps(): Promise<AutomaticTreatmentStep[]>;
    treat(): Promise<boolean>;
}
export declare class AilmentRegistry implements IAilmentRegistry {
    protected _ailments: IAilment[];
    register(ailment: IAilment): void;
    readonly ailments: IAilment[];
    get(id: string): IAilment | undefined;
}
