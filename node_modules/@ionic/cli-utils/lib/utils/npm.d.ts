import { DistTag, IShell, IShellRunOptions, IonicEnvironment, NpmClient } from '../../definitions';
import { PackageJson } from '@ionic/cli-framework';
/**
 * To be used with a module path resolved from require.resolve().
 */
export declare function readPackageJsonFileOfResolvedModule(resolvedModule: string): Promise<PackageJson>;
export interface PkgManagerDeps {
    npmClient: NpmClient;
    shell: IShell;
}
export declare type PkgManagerCommand = 'dedupe' | 'rebuild' | 'install' | 'uninstall' | 'run';
export interface PkgManagerOptions extends IShellRunOptions {
    command: PkgManagerCommand;
    pkg?: string;
    script?: string;
    scriptArgs?: string[];
    global?: boolean;
    save?: boolean;
    saveDev?: boolean;
    saveExact?: boolean;
}
/**
 * Resolves pkg manager intent with command args.
 *
 * TODO: this is a weird function and should be split up
 *
 * @return Promise<args> If the args is an empty array, it means the pkg manager doesn't have that command.
 */
export declare function pkgManagerArgs({npmClient, shell}: PkgManagerDeps, options: PkgManagerOptions): Promise<string[]>;
/**
 * TODO: switch this to use `package-json` module?
 *
 * @return Promise<latest version or `undefined`>
 */
export declare function pkgLatestVersion(name: string, distTag?: DistTag): Promise<string | undefined>;
export declare function promptToInstallPkg(env: IonicEnvironment, options: Partial<PkgManagerOptions> & {
    pkg: string;
}): Promise<boolean>;
