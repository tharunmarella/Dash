"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const os = require("os");
const net = require("net");
exports.ERROR_NETWORK_ADDRESS_NOT_AVAIL = 'NETWORK_ADDRESS_NOT_AVAIL';
function getSuitableNetworkInterfaces() {
    const networkInterfaces = os.networkInterfaces();
    const devices = [];
    for (const deviceName of Object.keys(networkInterfaces)) {
        const networkInterface = networkInterfaces[deviceName];
        for (const networkAddress of networkInterface) {
            if (!networkAddress.internal && networkAddress.family === 'IPv4') {
                devices.push(Object.assign({ deviceName }, networkAddress));
            }
        }
    }
    return devices;
}
exports.getSuitableNetworkInterfaces = getSuitableNetworkInterfaces;
function findClosestOpenPort(port, host) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        function t(portToCheck) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                if (yield isPortAvailable(portToCheck, host)) {
                    return portToCheck;
                }
                return t(portToCheck + 1);
            });
        }
        return t(port);
    });
}
exports.findClosestOpenPort = findClosestOpenPort;
function isPortAvailable(port, host) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const net = yield Promise.resolve().then(() => require('net'));
        return new Promise((resolve, reject) => {
            const tester = net.createServer()
                .once('error', (err) => {
                if (err.code === 'EADDRNOTAVAIL') {
                    reject(exports.ERROR_NETWORK_ADDRESS_NOT_AVAIL);
                }
                else if (err.code === 'EADDRINUSE') {
                    resolve(false); // host/port in use
                }
                else {
                    reject(err);
                }
            })
                .once('listening', () => {
                tester.once('close', () => {
                    resolve(true); // found available host/port
                })
                    .close();
            })
                .on('error', (err) => {
                reject(err);
            })
                .listen(port, host);
        });
    });
}
exports.isPortAvailable = isPortAvailable;
function isHostConnectable(host, port, timeout = 1000) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        let ms = 0;
        const interval = 1000;
        const tryConnect = () => tslib_1.__awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                const sock = net.connect({ port, host });
                sock.on('connect', () => {
                    sock.destroy();
                    resolve(true);
                });
                sock.on('error', err => {
                    reject(err);
                });
            });
        });
        return new Promise((resolve) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            setInterval(() => {
                ms += interval;
                if (ms > timeout) {
                    resolve(false);
                }
            }, interval);
            while (true) {
                try {
                    yield tryConnect();
                    resolve(true);
                    break;
                }
                catch (e) {
                    // try again
                }
            }
        }));
    });
}
exports.isHostConnectable = isHostConnectable;
