import { IConfig, IIntegration, IIntegrationAddOptions, IProject, IShell, ITaskChain, InfoItem, IntegrationName, ProjectIntegration, ProjectPersonalizationDetails } from '../../definitions';
import * as cordovaLibType from './cordova';
export { INTEGRATION_NAMES } from '../../guards';
export interface IntegrationOptions {
    quiet?: boolean;
}
export interface IntegrationDeps {
    config: IConfig;
    shell: IShell;
    project: IProject;
    tasks: ITaskChain;
}
export declare abstract class BaseIntegration implements IIntegration {
    protected readonly config: IConfig;
    protected readonly project: IProject;
    protected readonly shell: IShell;
    protected readonly tasks: ITaskChain;
    abstract name: IntegrationName;
    abstract archiveUrl?: string;
    constructor({config, project, shell, tasks}: IntegrationDeps);
    static createFromName(deps: IntegrationDeps, name: 'cordova'): Promise<cordovaLibType.Integration>;
    abstract getInfo(): Promise<InfoItem[]>;
    getConfig(): Promise<ProjectIntegration | undefined>;
    enable(): Promise<void>;
    disable(): Promise<void>;
    personalize(details: ProjectPersonalizationDetails): Promise<void>;
    add(opts?: IIntegrationAddOptions): Promise<void>;
}
