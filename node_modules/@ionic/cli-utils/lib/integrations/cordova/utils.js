"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const cli_framework_1 = require("@ionic/cli-framework");
const constants_1 = require("../../../constants");
/**
 * Filter and gather arguments from command line to be passed to Cordova
 */
function filterArgumentsForCordova(metadata, options) {
    const m = Object.assign({}, metadata);
    if (!m.options) {
        m.options = [];
    }
    const globalCordovaOpts = [
        {
            name: 'verbose',
            description: '',
            type: Boolean,
            groups: [constants_1.OptionGroup.Cordova],
        },
    ];
    m.options.push(...globalCordovaOpts);
    const results = cli_framework_1.filterCommandLineOptionsByGroup(m, options, constants_1.OptionGroup.Cordova);
    results['target'] = results['cordova-target'];
    delete results['cordova-target'];
    const args = cli_framework_1.unparseArgs(results, { useEquals: false, allowCamelCase: true });
    const i = args.indexOf('--');
    if (i >= 0) {
        args.splice(i, 1); // join separated args onto main args, use them verbatim
    }
    return [m.name, ...args];
}
exports.filterArgumentsForCordova = filterArgumentsForCordova;
function generateBuildOptions(metadata, inputs, options) {
    const [platform] = inputs;
    const includesAppScriptsGroup = cli_framework_1.OptionFilters.includesGroups(constants_1.OptionGroup.AppScripts);
    const excludesCordovaGroup = cli_framework_1.OptionFilters.excludesGroups(constants_1.OptionGroup.Cordova);
    const results = cli_framework_1.filterCommandLineOptions(metadata, options, o => excludesCordovaGroup(o) || includesAppScriptsGroup(o));
    return Object.assign({}, results, { externalAddressRequired: true, nobrowser: true, engine: 'cordova', platform });
}
exports.generateBuildOptions = generateBuildOptions;
function checkCordova(env) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const project = yield env.project.load();
        if (!project.integrations.cordova) {
            yield env.runCommand(['integrations', 'enable', 'cordova']);
        }
    });
}
exports.checkCordova = checkCordova;
