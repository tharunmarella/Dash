"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const _1 = require("../");
class Integration extends _1.BaseIntegration {
    constructor() {
        super(...arguments);
        this.name = 'cordova';
        this.archiveUrl = 'https://d2ql0qc7j8u4b2.cloudfront.net/integration-cordova.tar.gz';
    }
    getInfo() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { getAndroidSdkToolsVersion } = yield Promise.resolve().then(() => require('./android'));
            const [cordovaVersion, cordovaPlatforms, xcode, iosDeploy, iosSim, androidSdkToolsVersion,] = yield Promise.all([
                this.getCordovaVersion(),
                this.getCordovaPlatformVersions(),
                this.getXcodebuildVersion(),
                this.getIOSDeployVersion(),
                this.getIOSSimVersion(),
                getAndroidSdkToolsVersion(),
            ]);
            const info = [];
            info.push({ type: 'global-packages', key: 'cordova', flair: 'Cordova CLI', value: cordovaVersion || 'not installed' }, { type: 'local-packages', key: 'Cordova Platforms', value: cordovaPlatforms || 'none' });
            if (xcode) {
                info.push({ type: 'system', key: 'Xcode', value: xcode });
            }
            if (iosDeploy) {
                info.push({ type: 'system', key: 'ios-deploy', value: iosDeploy });
            }
            if (iosSim) {
                info.push({ type: 'system', key: 'ios-sim', value: iosSim });
            }
            if (androidSdkToolsVersion) {
                info.push({ type: 'system', key: 'Android SDK Tools', value: androidSdkToolsVersion });
            }
            info.push({ type: 'environment', key: 'ANDROID_HOME', value: process.env.ANDROID_HOME || 'not set' });
            return info;
        });
    }
    personalize({ appName, bundleId }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { ConfigXml } = yield Promise.resolve().then(() => require('./config'));
            const conf = yield ConfigXml.load(this.project.directory);
            conf.setName(appName);
            if (bundleId) {
                conf.setBundleId(bundleId);
            }
            yield conf.save();
        });
    }
    getCordovaVersion() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return this.shell.cmdinfo('cordova', ['-v', '--no-telemetry']);
        });
    }
    getCordovaPlatformVersions() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const output = yield this.shell.cmdinfo('cordova', ['platform', 'ls', '--no-telemetry']);
            return output ? output
                .replace(/\s+/g, ' ')
                .replace('Installed platforms:', '')
                .replace(/Available platforms.+/, '')
                .trim() : undefined;
        });
    }
    getXcodebuildVersion() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return this.shell.cmdinfo('xcodebuild', ['-version']);
        });
    }
    getIOSDeployVersion() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return this.shell.cmdinfo('ios-deploy', ['--version']);
        });
    }
    getIOSSimVersion() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return this.shell.cmdinfo('ios-sim', ['--version']);
        });
    }
}
exports.Integration = Integration;
