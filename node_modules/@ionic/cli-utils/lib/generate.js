"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const chalk_1 = require("chalk");
const errors_1 = require("./errors");
const runner_1 = require("./runner");
const project_1 = require("./project");
class GenerateRunner extends runner_1.Runner {
    constructor(env) {
        super();
        this.env = env;
    }
    static createFromProjectType(env, type) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (type === 'angular') {
                const { GenerateRunner } = yield Promise.resolve().then(() => require('./project/angular/generate'));
                return new GenerateRunner(env);
            }
            else if (type === 'ionic-angular') {
                const { GenerateRunner } = yield Promise.resolve().then(() => require('./project/ionic-angular/generate'));
                return new GenerateRunner(env);
            }
            else {
                throw new errors_1.RunnerNotFoundException(`Generators are not supported in this project type (${chalk_1.default.bold(project_1.prettyProjectName(env.project.type))}).` +
                    (type === 'custom' ? `Since you're using the ${chalk_1.default.bold('custom')} project type, this command won't work. The Ionic CLI doesn't know how to generate components for custom projects.\n\n` : ''));
            }
        });
    }
    createOptionsFromCommandLine(inputs, options) {
        const [type, name] = inputs;
        return { type, name };
    }
    ensureCommandLine(inputs, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () { });
    }
}
exports.GenerateRunner = GenerateRunner;
function generate(env, inputs, options) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        try {
            const runner = yield GenerateRunner.createFromProjectType(env, env.project.type);
            const opts = runner.createOptionsFromCommandLine(inputs, options);
            yield runner.run(opts);
        }
        catch (e) {
            if (e instanceof errors_1.RunnerException) {
                throw new errors_1.FatalException(e.message);
            }
            throw e;
        }
    });
}
exports.generate = generate;
