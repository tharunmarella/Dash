"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const path = require("path");
const chalk_1 = require("chalk");
const guards_1 = require("../guards");
const errors_1 = require("./errors");
const shell_1 = require("./utils/shell");
exports.ERROR_SHELL_COMMAND_NOT_FOUND = 'SHELL_COMMAND_NOT_FOUND';
class Shell {
    constructor({ tasks, log, projectDir }) {
        this.tasks = tasks;
        this.log = log;
        this.projectDir = projectDir;
    }
    run(command, args, _a) {
        var { showCommand = true, showError = true, fatalOnNotFound = true, fatalOnError = true, logOptions, truncateErrorOutput } = _a, crossSpawnOptions = tslib_1.__rest(_a, ["showCommand", "showError", "fatalOnNotFound", "fatalOnError", "logOptions", "truncateErrorOutput"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const fullCmd = shell_1.prettyCommand(command, args);
            const truncatedCmd = fullCmd.length > 80 ? fullCmd.substring(0, 80) + '...' : fullCmd;
            const options = Object.assign({}, crossSpawnOptions);
            const log = this.log.clone(logOptions);
            if (showCommand) {
                const ws = log.createWriteStream();
                options.stdoutPipe = ws;
                options.stderrPipe = ws;
            }
            this.prepareSpawnOptions(options);
            if (showCommand && this.log.shouldLog('info')) {
                this.log.rawmsg(`> ${chalk_1.default.green(fullCmd)}`);
            }
            try {
                yield shell_1.runcmd(command, args, options);
            }
            catch (e) {
                if (e.code === 'ENOENT') {
                    if (fatalOnNotFound) {
                        throw new errors_1.FatalException(`Command not found: ${chalk_1.default.green(command)}`, 127);
                    }
                    else {
                        throw exports.ERROR_SHELL_COMMAND_NOT_FOUND;
                    }
                }
                if (!guards_1.isExitCodeException(e)) {
                    throw e;
                }
                let err = e.message || '';
                if (truncateErrorOutput && err.length > truncateErrorOutput) {
                    err = `${chalk_1.default.bold('(truncated)')} ... ` + err.substring(err.length - truncateErrorOutput);
                }
                const publicErrorMsg = `An error occurred while running ${chalk_1.default.green(truncatedCmd)} (exit code ${e.exitCode})\n`;
                const privateErrorMsg = `Subprocess (${chalk_1.default.green(command)}) encountered an error (exit code ${e.exitCode}).`;
                if (fatalOnError) {
                    if (showError) {
                        throw new errors_1.FatalException(publicErrorMsg, e.exitCode);
                    }
                    else {
                        throw new errors_1.FatalException(privateErrorMsg, e.exitCode);
                    }
                }
                else {
                    if (showError) {
                        this.log.error(publicErrorMsg);
                    }
                }
                throw e;
            }
        });
    }
    output(command, args, _a) {
        var { fatalOnError = true, showCommand = false } = _a, crossSpawnOptions = tslib_1.__rest(_a, ["fatalOnError", "showCommand"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const fullCmd = shell_1.prettyCommand(command, args);
            const truncatedCmd = fullCmd.length > 80 ? fullCmd.substring(0, 80) + '...' : fullCmd;
            if (showCommand && this.log.shouldLog('info')) {
                this.log.rawmsg(`> ${chalk_1.default.green(fullCmd)}`);
            }
            try {
                return yield shell_1.runcmd(command, args, crossSpawnOptions);
            }
            catch (e) {
                if (e.code === 'ENOENT') {
                    throw new errors_1.FatalException(`Command not found: ${chalk_1.default.green(command)}`, 127);
                }
                if (!guards_1.isExitCodeException(e)) {
                    throw e;
                }
                const errorMsg = `An error occurred while running ${chalk_1.default.green(truncatedCmd)} (exit code ${e.exitCode})\n`;
                if (fatalOnError) {
                    throw new errors_1.FatalException(errorMsg, e.exitCode);
                }
                else {
                    this.log.error(errorMsg);
                }
                return '';
            }
        });
    }
    spawn(command, args, _a) {
        var { showCommand = true } = _a, crossSpawnOptions = tslib_1.__rest(_a, ["showCommand"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const fullCmd = shell_1.prettyCommand(command, args);
            this.prepareSpawnOptions(crossSpawnOptions);
            const p = yield shell_1.spawncmd(command, args, crossSpawnOptions);
            if (showCommand && this.log.shouldLog('info')) {
                this.log.rawmsg(`> ${chalk_1.default.green(fullCmd)}`);
            }
            return p;
        });
    }
    cmdinfo(cmd, args = []) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const opts = {};
            this.prepareSpawnOptions(opts);
            try {
                const out = yield shell_1.runcmd(cmd, args, opts);
                return out.split('\n').join(' ');
            }
            catch (e) {
                // no command info at this point
            }
        });
    }
    prepareSpawnOptions(options) {
        if (!options.env) {
            options.env = {};
        }
        options.env.PATH = this.supplementPATH(process.env.PATH);
    }
    supplementPATH(p) {
        return this.projectDir ? `${path.resolve(this.projectDir, 'node_modules', '.bin')}${path.delimiter}${p}` : p;
    }
}
exports.Shell = Shell;
