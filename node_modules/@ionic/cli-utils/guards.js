"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LOG_LEVELS = ['info', 'msg', 'ok', 'warn', 'error', 'announce'];
exports.INTEGRATION_NAMES = ['cordova'];
function isCommand(cmd) {
    return cmd && typeof cmd.run === 'function';
}
exports.isCommand = isCommand;
function isCommandPreRun(cmd) {
    return cmd && typeof cmd.preRun === 'function';
}
exports.isCommandPreRun = isCommandPreRun;
function isLogLevel(l) {
    const loglevel = l;
    return exports.LOG_LEVELS.includes(loglevel);
}
exports.isLogLevel = isLogLevel;
function isStarterManifest(o) {
    const obj = o;
    return obj &&
        typeof obj.name === 'string' &&
        typeof obj.baseref === 'string';
}
exports.isStarterManifest = isStarterManifest;
function isCordovaPackageJson(o) {
    const obj = o;
    return obj &&
        typeof obj.name === 'string' &&
        typeof obj.cordova === 'object' &&
        typeof obj.cordova.platforms === 'object' &&
        typeof obj.cordova.plugins === 'object';
}
exports.isCordovaPackageJson = isCordovaPackageJson;
function isAngularCLIJson(o) {
    return o &&
        typeof o.project === 'object' &&
        typeof o.project.name === 'string';
}
exports.isAngularCLIJson = isAngularCLIJson;
function isExitCodeException(e) {
    const err = e;
    return err && typeof err.exitCode === 'number' && err.exitCode >= 0 && err.exitCode <= 255;
}
exports.isExitCodeException = isExitCodeException;
function isPlugin(p) {
    return p && (typeof p.getInfo === 'undefined' || typeof p.getInfo === 'function');
}
exports.isPlugin = isPlugin;
function isLoadedPlugin(p) {
    return p
        && typeof p.meta === 'object'
        && typeof p.fileName === 'string'
        && typeof p.pkg === 'object';
}
exports.isLoadedPlugin = isLoadedPlugin;
function isSuperAgentError(e) {
    const err = e;
    return e && err.response && typeof err.response === 'object';
}
exports.isSuperAgentError = isSuperAgentError;
function isAPIResponseSuccess(r) {
    const res = r;
    return res && (typeof res.data === 'object' || typeof res.data === 'string');
}
exports.isAPIResponseSuccess = isAPIResponseSuccess;
function isAPIResponseError(r) {
    const res = r;
    return res && typeof res.error === 'object';
}
exports.isAPIResponseError = isAPIResponseError;
function isAppDetails(d) {
    const details = d;
    return details
        && typeof details === 'object'
        && typeof details.id === 'string'
        && typeof details.name === 'string'
        && typeof details.slug === 'string';
}
exports.isAppDetails = isAppDetails;
function isAppResponse(r) {
    const res = r;
    return isAPIResponseSuccess(res) && isAppDetails(res.data);
}
exports.isAppResponse = isAppResponse;
function isAppsResponse(r) {
    const res = r;
    if (!isAPIResponseSuccess(res) || !Array.isArray(res.data)) {
        return false;
    }
    if (res.data.length > 0) {
        return isAppDetails(res.data[0]);
    }
    return true;
}
exports.isAppsResponse = isAppsResponse;
function isLoginResponse(r) {
    const res = r;
    return isAPIResponseSuccess(r)
        && typeof res.data.user === 'object'
        && typeof res.data.user.id === 'number'
        && typeof res.data.user.email === 'string'
        && typeof res.data.token === 'string';
}
exports.isLoginResponse = isLoginResponse;
function isUserResponse(r) {
    const res = r;
    return isAPIResponseSuccess(r)
        && typeof res.data.id === 'number'
        && typeof res.data.email === 'string';
}
exports.isUserResponse = isUserResponse;
function isSSHKeyListResponse(r) {
    const res = r;
    if (!isAPIResponseSuccess(r) || !Array.isArray(r.data)) {
        return false;
    }
    if (typeof r.data[0] === 'object') {
        return typeof res.data[0].id === 'string'
            && typeof res.data[0].pubkey === 'string'
            && typeof res.data[0].fingerprint === 'string'
            && typeof res.data[0].annotation === 'string'
            && typeof res.data[0].name === 'string'
            && typeof res.data[0].created === 'string'
            && typeof res.data[0].updated === 'string';
    }
    return true;
}
exports.isSSHKeyListResponse = isSSHKeyListResponse;
function isSSHKeyResponse(r) {
    const res = r;
    return isAPIResponseSuccess(r)
        && typeof res.data.id === 'string'
        && typeof res.data.pubkey === 'string'
        && typeof res.data.fingerprint === 'string'
        && typeof res.data.annotation === 'string'
        && typeof res.data.name === 'string'
        && typeof res.data.created === 'string'
        && typeof res.data.updated === 'string';
}
exports.isSSHKeyResponse = isSSHKeyResponse;
function isSecurityProfile(o) {
    const obj = o;
    return obj && typeof obj === 'object'
        && typeof obj.name === 'string'
        && typeof obj.tag === 'string'
        && typeof obj.type === 'string'
        && typeof obj.created === 'string'
        && typeof obj.credentials === 'object';
}
exports.isSecurityProfile = isSecurityProfile;
function isSecurityProfileResponse(r) {
    const res = r;
    return isAPIResponseSuccess(res) && isSecurityProfile(res.data);
}
exports.isSecurityProfileResponse = isSecurityProfileResponse;
function isSecurityProfilesResponse(r) {
    const res = r;
    if (!isAPIResponseSuccess(res) || !Array.isArray(res.data)) {
        return false;
    }
    if (res.data.length > 0) {
        return isSecurityProfile(res.data[0]);
    }
    return true;
}
exports.isSecurityProfilesResponse = isSecurityProfilesResponse;
function isAutomaticallyTreatableAilment(ailment) {
    return ailment && typeof ailment.treat === 'function';
}
exports.isAutomaticallyTreatableAilment = isAutomaticallyTreatableAilment;
function isIntegrationName(name) {
    const n = name;
    return exports.INTEGRATION_NAMES.includes(n);
}
exports.isIntegrationName = isIntegrationName;
