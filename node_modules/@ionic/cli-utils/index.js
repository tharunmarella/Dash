"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const util = require("util");
const path = require("path");
const chalk_1 = require("chalk");
const Debug = require("debug");
const ci_info_1 = require("ci-info");
const cli_framework_1 = require("@ionic/cli-framework");
const fs_1 = require("@ionic/cli-framework/utils/fs");
const project_1 = require("./lib/project");
const bootstrap_1 = require("./bootstrap");
const config_1 = require("./lib/config");
const http_1 = require("./lib/http");
const environment_1 = require("./lib/environment");
const logger_1 = require("./lib/utils/logger");
const task_1 = require("./lib/utils/task");
const npm_1 = require("./lib/utils/npm");
const telemetry_1 = require("./lib/telemetry");
const session_1 = require("./lib/session");
const shell_1 = require("./lib/shell");
const prompts_1 = require("./lib/prompts");
tslib_1.__exportStar(require("./constants"), exports);
tslib_1.__exportStar(require("./guards"), exports);
const name = '@ionic/cli-utils';
const debug = Debug('ionic:cli-utils');
function getProject(projectDir, deps) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        if (!projectDir) {
            return new project_1.OutsideProject('', project_1.PROJECT_FILE);
        }
        const type = yield project_1.BaseProject.determineType(projectDir, deps);
        if (!type) {
            return new project_1.OutsideProject('', project_1.PROJECT_FILE);
        }
        return project_1.BaseProject.createFromProjectType(projectDir, project_1.PROJECT_FILE, deps, type);
    });
}
exports.getProject = getProject;
function generateIonicEnvironment(plugin, pargv, env) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const cwd = process.cwd();
        const argv = cli_framework_1.parseArgs(pargv, { boolean: true, string: '_' });
        const config = new config_1.Config(env['IONIC_CONFIG_DIRECTORY'] || config_1.DEFAULT_CONFIG_DIRECTORY, config_1.CONFIG_FILE);
        const flags = config_1.gatherFlags(argv);
        let outstream;
        let errstream;
        let tasks;
        let bottomBar;
        let log;
        let level = 'info';
        let prefix = '';
        const configData = yield config.load();
        if (ci_info_1.isCI || configData.interactive === false) {
            flags.interactive = false;
        }
        if (argv['verbose']) {
            Debug.enable('*');
        }
        else if (argv['quiet']) {
            level = 'warn';
        }
        if (argv['color'] === false) {
            chalk_1.default.enabled = false;
        }
        if (argv['log-timestamps']) {
            prefix = () => `${chalk_1.default.dim('[' + new Date().toISOString() + ']')}`;
        }
        if (flags.interactive) {
            const inquirer = yield Promise.resolve().then(() => require('inquirer'));
            bottomBar = new inquirer.ui.BottomBar();
            outstream = bottomBar.log;
            errstream = bottomBar.log;
            log = new logger_1.Logger({ level, prefix, outstream, errstream });
            tasks = new task_1.InteractiveTaskChain({ log, bottomBar });
        }
        else {
            outstream = process.stdout;
            errstream = process.stderr;
            log = new logger_1.Logger({ level, prefix, outstream, errstream });
            tasks = new task_1.TaskChain({ log });
        }
        const projectDir = yield fs_1.findBaseDirectory(cwd, project_1.PROJECT_FILE);
        env['IONIC_PROJECT_DIR'] = projectDir || '';
        env['IONIC_PROJECT_FILE'] = project_1.PROJECT_FILE;
        configData.version = plugin.meta.pkg.version;
        const meta = {
            cwd,
            local: env['IONIC_CLI_LOCAL'] ? true : false,
            binPath: env['IONIC_CLI_BIN'],
            libPath: env['IONIC_CLI_LIB'],
        };
        const getInfo = () => tslib_1.__awaiter(this, void 0, void 0, function* () {
            const packageJson = yield npm_1.readPackageJsonFileOfResolvedModule(__filename);
            const version = packageJson.version || '';
            const osName = yield Promise.resolve().then(() => require('os-name'));
            const os = osName();
            const node = process.version;
            const npm = yield shell.cmdinfo('npm', ['-v']);
            const info = [
                { type: 'cli-packages', key: name, value: version, path: path.dirname(__filename) },
                { type: 'cli-packages', key: 'ionic', flair: 'Ionic CLI', value: plugin.meta.pkg.version, path: path.dirname(path.dirname(plugin.meta.filePath)) },
                { type: 'system', key: 'Node', value: node },
                { type: 'system', key: 'npm', value: npm || 'not installed' },
                { type: 'system', key: 'OS', value: os },
            ];
            info.push(...(yield project.getInfo()));
            return info;
        });
        const shell = new shell_1.Shell({ tasks, log, projectDir });
        const project = yield getProject(projectDir, { config, log, shell, tasks });
        const client = new http_1.Client(config);
        const session = new session_1.ProSession(config, client, project);
        const telemetry = new telemetry_1.Telemetry({ config, client, getInfo, meta, session, cli: plugin, project });
        yield config.prepare();
        const ienv = new environment_1.Environment({
            bottomBar,
            client,
            config,
            env,
            flags,
            getInfo,
            log,
            meta,
            namespace: plugin.namespace,
            plugins: {
                ionic: plugin,
            },
            prompt: yield prompts_1.createPromptModule({ confirm: flags.confirm, interactive: flags.interactive, log, config }),
            project,
            session,
            shell,
            tasks,
            telemetry,
        });
        // TODO: proper DI
        ienv.namespace.env = ienv;
        ienv.open();
        if (env['IONIC_CLI_LOCAL_ERROR']) {
            debug(`Reason for not using local CLI: ${chalk_1.default.bold(env['IONIC_CLI_LOCAL_ERROR'])}`);
            if (env['IONIC_CLI_LOCAL_ERROR'] === bootstrap_1.ERROR_VERSION_TOO_OLD) {
                log.warn(`Detected locally installed Ionic CLI, but it's too old--using global CLI.`);
            }
        }
        debug(`CLI flags: ${util.inspect(flags, { breakLength: Infinity, colors: chalk_1.default.enabled })}`);
        if (typeof argv['yarn'] === 'boolean') {
            log.warn(`${chalk_1.default.green('--yarn')} / ${chalk_1.default.green('--no-yarn')} was removed in CLI 4.0. Use ${chalk_1.default.green(`ionic config set -g npmClient ${argv['yarn'] ? 'yarn' : 'npm'}`)}.`);
        }
        if (!projectDir) {
            const foundDir = yield fs_1.findBaseDirectory(cwd, project_1.PROJECT_FILE_LEGACY);
            if (foundDir) {
                log.warn(`${chalk_1.default.bold(project_1.PROJECT_FILE_LEGACY)} file found in ${chalk_1.default.bold(foundDir)}--please rename it to ${chalk_1.default.bold(project_1.PROJECT_FILE)}, or your project directory will not be detected!`);
            }
        }
        return ienv;
    });
}
exports.generateIonicEnvironment = generateIonicEnvironment;
